package FileTransfer;

import ScenePackage.MainPanel;
import Security.DHCoder_EKE;
import Security.MD5DS;
import org.apache.commons.codec.binary.Base64;

import java.io.*;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.Key;
import java.security.MessageDigest;
import java.text.DecimalFormat;

/**
 * File transfer server
 */
public class FileTransferServer extends ServerSocket {
    private static final int SERVER_PORT = 8899; // port number
    private static DecimalFormat df = null;
    private static Key secretKeyB;  //secret key in server

    private String sigA = null;         //digital signature received from client
    private String sigB = "";           //digital signature server generated
    String decryptedContent;            //decrypted file content

    //identifier numbers of messages
    final int fileIdentifier = 2222;
    final int DSIdentifier = 3333;
    final int pIdentifier = 4444;
    final int gIdentifier = 5555;
    final int AIdentifier = 6666;
    final int BIdentifier = 7777;
    final int CBIdentifier = 8888;
    final int CA_CBIdentifier = 9999;
    final int CAIdentifier = 2555;

    private BigInteger p;   //BigInteger p received from client
    private BigInteger g;   //BigInteger g received from client
    private BigInteger A;   //BigInteger A received from client
    private BigInteger b;   //BigInteger b generated by server
    private BigInteger B;   //BigInteger B calculated by server
    private BigInteger CB;  //Random Challenge CB generated by server
    private String CA;

    private String filePath;

    static {
        //set number format
        df = new DecimalFormat("#0.0");
        df.setRoundingMode(RoundingMode.HALF_UP);
        df.setMinimumFractionDigits(1);
        df.setMaximumFractionDigits(1);
    }

    public FileTransferServer() throws Exception {
        super(SERVER_PORT);
    }

    /**
     * handle every file from client use thread
     * @throws Exception
     */
    public void load() throws Exception {
        while (true) {
            Socket socket = this.accept();
            /**
             * asynchronous
             */
            // use new thread handle task
            new Thread(new Task(socket)).start();
        }
    }

    /**
     * handle file transfer
     */
    class Task implements Runnable {
        private Socket socket;

        private DataInputStream dis;    //data input stream
        private DataOutputStream dos;   //data output stream

        public Task(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                receiveMsg(this.socket);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * handle message received according to identifier
         * @param socket    socket
         */
        private void receiveMsg(Socket socket){
            try{
                //initialize data input stream
                dis = new DataInputStream(socket.getInputStream());
                String fileName = "undefined";
                while (true){
                    //read length of the msg
                    int len = dis.readInt();
                    //read specifier of the msg
                    int specifier = dis.readInt();
                    switch (specifier){
                        //received p from client
                        case pIdentifier:
                            p = new BigInteger(dis.readUTF());
                            break;

                        //received g from client
                        case gIdentifier:
                            g = new BigInteger(dis.readUTF());
                            break;

                        //receive A from client
                        case AIdentifier:
                            //read A from client
                            A = new BigInteger(dis.readUTF());
                            b = DHCoder_EKE.getA();
                            B = g.modPow(b, p); // calculated public client key (B=g^b(modp))
                            //print GUI
                            MainPanel.getInstance().addTextServer("A from client has been received!");

                            //send B to client
                            sendStr(B.toString(), BIdentifier);
                            MainPanel.getInstance().addTextServer("B to client has been sent!");
                            //calculate A_b
                            BigInteger calculatedA_b = A.modPow(b, p);
                            //generate secret key in server
                            secretKeyB = DHCoder_EKE.generateKey(calculatedA_b.toByteArray());
                            MainPanel.getInstance().addTextServer("B secret key has been generated.");

                            //generate random challenge number in server
                            CB = DHCoder_EKE.getA();
                            //print just for test man, for security element should be deleted.
                            System.out.println("secretB: " + Base64.encodeBase64String(secretKeyB.getEncoded()));
                            //send challenge number B to client
                            sendStr(Base64.encodeBase64String(DHCoder_EKE.encrypt(CB.toString().getBytes(), secretKeyB)), CBIdentifier);
                            //print in GUI
                            MainPanel.getInstance().addTextServer("Encrypted challenge Num from B has been sent.");
                            break;

                        //received (CA||CB) from client
                        case CA_CBIdentifier:
                            //decrypt received message
                            String[] receivedStr = new String(DHCoder_EKE.decrypt(Base64.decodeBase64(dis.readUTF()),secretKeyB)).split("\\s");
                            CA = receivedStr[0];
                            String receivedCB = receivedStr[1];
                            //print just for test man, for security element should be deleted.
                            System.out.println("receivedCA: " + CA);
                            System.out.println("receivedCB: " + receivedCB);
                            System.out.println("CB to string: " + CB.toString());

                            //do CB check
                            if(!receivedCB.equals(CB.toString())){
                                MainPanel.getInstance().addTextServer("Check CB failed!");
                                socket.close();
                                break;
                            }
                            MainPanel.getInstance().addTextServer("Check CB success!");

                            //send received decrypted CA to client
                            sendStr(Base64.encodeBase64String(DHCoder_EKE.encrypt(CA.getBytes(), secretKeyB)), CAIdentifier);
                            MainPanel.getInstance().addTextServer("Encrypted CA has been sent.");
                            break;

                        //receive digital signature form client
                        case DSIdentifier:
                            //read DS sent from client
                            sigA = dis.readUTF();
                            //DS check
                            if(sigB.equals(sigA)){
                                MainPanel.getInstance().addTextServer("Digital Signature check pass!");
                            }else {
                                MainPanel.getInstance().addTextServer("Digital Signature check fail!");
                                File file = new File(filePath);
                                file.delete();
                                File file1 = new File("\\tmpB");
                                file1.delete();
                            }
                            break;

                        //receive file
                        case fileIdentifier:
                            //read file name
                            fileName = dis.readUTF();
                            String encryptedContent = "";
                            String line;
                            while (!(line = dis.readUTF()).equalsIgnoreCase("")) {
                                encryptedContent += line;
                                if (line.isEmpty()) {
                                    break;
                                }
                            }
                            //decrypt file content
                            decryptedContent = new String(DHCoder_EKE.decrypt(Base64.decodeBase64(encryptedContent), secretKeyB));
                            //write file
                            FileManage.getInstance().writeFile(fileName, decryptedContent);
                            //generate own digital signature
                            MessageDigest md = MessageDigest.getInstance("MD5");
                            sigB = MD5DS.getDigest(new FileInputStream(fileName), md, 2048);
                            filePath = fileName;
                            MainPanel.getInstance().addTextServer("File has been received with decrypted.\nOwn DS has been generated.");
                            break;

                        default:
                            System.out.println("Unknown identifier!");
                            MainPanel.getInstance().addTextServer("Unknown message identifier.");
                            break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * send string to client
         * @param str   message
         * @param identifier    identifier number
         */
        private void sendStr(String str, int identifier){
            try {
                dos = new DataOutputStream(socket.getOutputStream());
                dos.writeInt(str.length());
                dos.writeInt(identifier);
                dos.writeUTF(str);
                dos.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
}

